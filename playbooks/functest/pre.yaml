- hosts: localhost
  vars:
    vault_addr: "{{ zuul_vault_addr }}"
    vault_token: "{{ lookup('file', zuul_base_vault_token_path) }}"
    vault_secret_dest: "{{ zuul.executor.work_root }}/.approle-secret"
    vault_token_dest: "{{ zuul.executor.work_root }}/.approle-token"
    vault_role_name: "{{ vault_data.vault_role_name }}"

  roles:
    - role: create-vault-approle-secret

    - role: create-vault-approle-token
      vault_role_id: "{{ vault_data.vault_role_id }}"
      vault_wrapping_token_id: "{{ lookup('file', vault_secret_dest) }}"

- hosts: all
  vars:
    vault_token_file: "{{ zuul.executor.work_root }}/.approle-token"
  tasks:
    - name: Select random cloud
      ansible.builtin.set_fact:
        vault_cloud_path: "{{ otc_base_item }}"
      with_random_choice: "{{ functest_candidate_clouds }}"
      loop_control:
        loop_var: "otc_base_item"

    - name: Get temporary credentials
      delegate_to: localhost
      no_log: true
      ansible.builtin.uri:
        url: "{{ zuul_vault_addr }}/v1/openstack/creds/{{ vault_cloud_path }}"
        headers:
          X-Vault-Token: "{{ lookup('file', vault_token_file) }}"
        method: "GET"
      register: vault_data

    - name: Save data for later revocation
      delegate_to: localhost
      ansible.builtin.copy:
        dest: "{{ zuul.executor.work_root }}/.{{ zuul.build }}.functest"
        content:
          cloud_creds:
            lease_id: "{{ vault_data.json.lease_id }}"
        mode: "0440"

    - name: Include deploy-clouds-config role
      no_log: true
      ansible.builtin.include_role:
        name: deploy-clouds-config
      vars:
        cloud_config:
          clouds:
            functional_user: "{{ vault_data.json.data | combine({'auth': {'user_domain_id': vault_data.json.data.auth.project_domain_id}}, recursive=True) }}"
