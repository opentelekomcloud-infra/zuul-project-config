- hosts: localhost
  vars:
    vault_addr: "{{ zuul_vault_addr }}"
    vault_token: "{{ lookup('file', zuul_base_vault_token_path) }}"
    vault_secret_dest: "{{ ansible_user_dir }}/.approle-secret"
    vault_token_dest: "{{ ansible_user_dir }}/.approle-token"

    vault_role_name: "{{ vault_data.vault_role_name }}"

  roles:
    - role: create-vault-approle-secret
      when: zuul_success | bool

    - role: create-vault-approle-token
      vault_role_id: "{{ vault_data.vault_role_id }}"
      vault_wrapping_token_id: "{{ lookup('file', vault_secret_dest) }}"
      when: zuul_success | bool

  tasks:
    - block:
        - name: Find PDF files
          find:
            paths: "{{ zuul.executor.work_root }}/"
            file_type: file
            patterns: "*.pdf"
          register: pdf_files

        # If we have PDF we want to add it into the artifacts archive and upload at once
        # For this unpack>add>archive
        - name: Create working directory
          file:
            path: "{{ zuul.executor.work_root }}/docs"
            state: directory
            mode: 0755
          when: pdf_files.matched > 0

        - name: Extract docs archive
          vars:
            findme:
              - "{{ zuul.executor.work_root }}/docs-html.tar.bz2"
              - "{{ zuul.executor.work_root }}/docs-html.tar.gz"
          unarchive:  # noqa 208
            src: "{{ lookup('first_found', findme) }}"
            dest: "{{ zuul.executor.work_root }}/docs"
          when: pdf_files.matched > 0

        - name: Move found PDF file into doc dir
          command: "mv {{ item.path }} {{ zuul.executor.work_root }}/docs"
          with_items: "{{ pdf_files.files }}"
          when: pdf_files.matched > 0

        - name: Archive Docs - now with PDF inside
          command: "tar -f {{ zuul.executor.work_root }}/docs-html.tar.gz -C {{ zuul.executor.work_root }}/docs --exclude=.doctrees -cz ."
          args:
            warn: false
          when: pdf_files.matched > 0

        - name: Get cloud config from vault
          no_log: true
          vault_cloud_config:
            vault_addr: "{{ vault_addr }}"
            vault_token: "{{ lookup('file', vault_token_dest) }}"
            cloud_secret_path: "{{ promote_data.vault_cloud_secret_path }}"
            mode: "token"
          register: cloud_config

        - name: Upload docs
          include_role:
            name: upload-artifact-swift
          vars:
            artifact_src: "{{ zuul.executor.work_root }}/docs-html.tar.gz"
            upload_artifact_swift_cloud: "{{ cloud_config.config }}"
            upload_artifact_swift_container_name: "{{ container | default(zuul.project.short_name) }}"
            upload_artifact_swift_prefix: "{{ prefix | default(omit) }}"
            upload_artifact_swift_container_public: "{{ make_public | default(omit) }}"

        - name: Process search indexes
          block:
            # Process json for search engine
            - name: Find JSON files
              stat:
                path: "{{ zuul.executor.work_root }}/docs-json.tar.gz"
              register: docs_json_archive

            - name: Create working directory
              file:
                path: "{{ zuul.executor.work_root }}/docs-json"
                state: directory
                mode: 0755
              when: docs_json_archive.stat.exists

            - name: Extract docs-json archive
              ansible.builtin.unarchive:
                src: "{{ docs_json_archive.stat.path }}"
                dest: "{{ zuul.executor.work_root }}/docs-json"
              when: docs_json_archive.stat.exists

            - name: Find all indexes
              ansible.builtin.find:
                paths: "{{ zuul.executor.work_root }}/docs-json"
                patterns: "searchindex.json"
                recurse: true
              register: indexes

            - name: Get Search engine upload credentials from vault
              no_log: true
              vault_read:
                vault_addr: "{{ vault_addr }}"
                vault_token: "{{ lookup('file', vault_token_dest) }}"
                secret_path: "{{ promote_data.vault_search_secret_path }}"
              register: search_credentials
              when:
                - "indexes is defined"
                - "indexes.matched > 0"

            - name: Include upload-doc-index-opensearch
              include_role:
                name: upload-doc-index-opensearch
              vars:
                sphinx_json_dir: "{{ zj_index.path | dirname }}"
                search_engine_url: "{{ search_credentials.secret.url }}"
                search_engine_username: "{{ search_credentials.secret.username }}"
                search_engine_password: "{{ search_credentials.secret.password }}"
                search_engine_base_url: "{{ search_base_url | default('https://docs.otc.t-systems.com') }}"
                search_engine_doc_url: "{{ container | default(zuul.project.short_name) }}/{{ prefix | default('') }}{{ zj_index.path | relpath(zuul.executor.work_root + '/docs-json/') | dirname }}"
                search_engine_index_name: "{{ search_engine_index_prefix | default('hc_de') }}-{{ container | default('general') }}-{{ opensearch_doc_category | default('doc') }}-{{ zj_index.path | dirname | split('/') | last | default('general') }}"
                search_engine_doc_category: "{{ opensearch_doc_category | default(omit) }}"
              loop: "{{ indexes.files }}"
              loop_control:
                loop_var: zj_index
              when:
                - "indexes is defined"
                - "indexes.matched > 0"
          ignore_errors: true
          when:
            - "publish_doc_to_search is defined"
            - "publish_doc_to_search"

        - name: Destroy vault token
          include_role:
            name: destroy-vault-token
          vars:
            vault_token: "{{ lookup('file', vault_token_dest) }}"

        - name: Remove vault token file
          file:
            path: "{{ vault_token_dest }}"
            state: "absent"

      when: zuul_success | bool

- hosts: all
  tasks:
    # Drop unpacked docs, and docs-json since they are already uploaded to the target destination and zuul logs also contain archived copy
    - name: Ensure unpacked docs and docs-json are removed
      file:
        path: "{{ zj_item }}"
        state: "absent"
      loop:
        - "{{ zuul.executor.work_root }}/docs"
        - "{{ zuul.executor.work_root }}/docs-json"
      loop_control:
        loop_var: zj_item
    when: zuul_success | bool
